{"version":3,"sources":["Components/cardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["CardList","info","Error","SearchBox","searchField","searchChanges","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","this","setState","React","Component","App","onSearchChanges","event","target","value","Info","console","log","fetch","then","response","json","users","filteredCats","filter","name","toLowerCase","includes","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"2SAsBeA,G,YAlBE,SAAC,GAAW,EAAVC,KAKjB,MAAM,IAAIC,MAAM,eCKHC,EAZG,SAAC,GAAkC,EAAhCC,YAAiC,IAArBC,EAAoB,EAApBA,cAChC,OACC,kBAAC,WAAD,KACC,2BACAC,KAAK,SACLC,YAAY,cACZC,SAAUH,MCEEI,G,MARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAChEJ,EAAMK,YCkBKC,E,kDApBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAO,CACXC,UAAS,GAHO,E,8DAOAC,EAAOlB,GACxBmB,KAAKC,SAAS,CAACH,UAAS,M,+BAIxB,OAAGE,KAAKH,MAAMC,SACN,4CAEAE,KAAKV,MAAMK,a,GAhBOO,IAAMC,WCgDnBC,E,kDA1Cd,aAAc,IAAD,8BACZ,gBAkBDC,gBAAkB,SAACC,GAClB,EAAKL,SAAS,CAAEjB,YAAcsB,EAAMC,OAAOC,SAlB3C,EAAKX,MAAQ,CACZY,KAAK,GACLzB,YAAa,IAJF,E,gEAQQ,IAAD,OACnB0B,QAAQC,IAAI,qBACZC,MAAM,8CACJC,MAAK,SAACC,GACN,OAAOA,EAASC,UAEhBF,MAAK,SAACG,GACN,EAAKf,SAAS,CAACQ,KAAMO,S,+BAQf,IAAD,OACPN,QAAQC,IAAIX,KAAKH,MAAMY,MACvB,IAAMQ,EAAejB,KAAKH,MAAMY,KAAKS,QAAO,SAAAT,GAC3C,OAAOA,EAAKU,KAAKC,cAAcC,SAAS,EAAKxB,MAAMb,YAAYoC,kBAEhE,OACC,yBAAKE,UAAU,MACd,2CACA,kBAAC,EAAD,CAAWrC,cAAee,KAAKK,kBAC/B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUxB,KAAMoC,W,GAnCJd,aCKEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLW,QAAQX,MAAMA,EAAMwC,c","file":"static/js/main.5b0d9fc3.chunk.js","sourcesContent":["import React from 'react'\r\nimport Card from './card'\r\nimport './cardList.css'\r\n\r\nconst CardList = ({info}) => {\r\n\t//console.log(\"Checking for array\");\r\n\t//console.log(info.isArray());\r\n\t//console.log(info);\r\n\tif(true){\r\n\t\tthrow new Error(\"ERROR!!!!\");\r\n\t}\r\n\r\n\tconst cardArray = info.map((user, index) => {\r\n\t\t\treturn(<Card key={info[index].id} id={info[index].id} name={info[index].name} email={info[index].email} />);\r\n\t\t}\r\n\t)\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{cardArray}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default CardList;","import React, { Fragment } from 'react';\r\n\r\nconst SearchBox = ({ searchField,searchChanges }) => {\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<input\r\n\t\t\ttype=\"search\"\r\n\t\t\tplaceholder=\"search here\"\r\n\t\t\tonChange={searchChanges}\r\n\t\t\t />\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll', border:'2px solid black', height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state= {\r\n\t\t\thasError:false,\r\n\t\t}\r\n\t}\r\n\t\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h2>OOOOps ErroR</h2>\r\n\t\t} else {\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../Components/cardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll.js'\r\nimport ErrorBoundary from '../Components/ErrorBoundary.js'\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tInfo:[],\r\n\t\t\tsearchField: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconsole.log(\"componentDidMount\");\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then((users) => {\r\n\t\t\t\tthis.setState({Info: users});\r\n\t\t\t})\r\n\t}\r\n\r\n\tonSearchChanges = (event) => {\r\n\t\tthis.setState({ searchField : event.target.value });\r\n\t}\r\n\r\n\trender(){\r\n\t\tconsole.log(this.state.Info);\r\n\t\tconst filteredCats = this.state.Info.filter(Info => {\r\n\t\t\treturn Info.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1>Robofriends</h1>\r\n\t\t\t\t<SearchBox searchChanges={this.onSearchChanges} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList info={filteredCats} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t    </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  \t<App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}