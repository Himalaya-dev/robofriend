{"version":3,"sources":["reducers.js","Components/Card/card.js","Components/CardList/cardList.js","Components/SearchBox/SearchBox.js","Components/Scroll/Scroll.js","Components/ErrorBoundary/ErrorBoundary.js","Components/CounterButton/CounterButton.js","Components/Header/Header.js","Containers/App.js","action.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateCats","isPending","Cats","error","Card","id","name","email","className","alt","src","CardList","info","cardArray","map","user","index","key","SearchBox","searchChanges","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","setState","React","Component","CounterButton","updateCount","count","console","log","color","colour","onClick","PureComponent","Header","nextProps","nextState","App","onSearchChanges","event","target","value","onRequestCats","filteredCats","filter","toLowerCase","includes","connect","searchCats","requestCats","dispatch","payload","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3b9ab0a2.chunk.js","sourcesContent":["import { \r\n\tCHANGE_SEARCH_FIELD ,\r\n\tREQUEST_CATS_PENDING,\r\n\tREQUEST_CATS_SUCCESS,\r\n\tREQUEST_CATS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchCats = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateCats = {\r\n\tisPending: false,\r\n\tCats: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestCats = (state=initialStateCats, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_CATS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true});\r\n\t\tcase REQUEST_CATS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {Cats:action.payload, isPending: false});\r\n\t\tcase REQUEST_CATS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error:action.payload, isPending: false});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react'\r\nimport './card.css'\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\treturn(\r\n\t\t<div className=\"dib\">\r\n\t\t\t<img alt=\"profile\" src={`https://robohash.org/${id}?set=set4`}/>\r\n\t\t\t<h2>{ name }</h2>\r\n\t\t\t<p>{ email }</p>\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from '../Card/card'\r\nimport './cardList.css'\r\n\r\nconst CardList = ({info}) => {\r\n\t//console.log(\"Checking for array\");\r\n\t//console.log(info.isArray());\r\n\t//console.log(info);\r\n\r\n\tconst cardArray = info.map((user, index) => {\r\n\t\t\treturn(<Card key={info[index].id} id={info[index].id} name={info[index].name} email={info[index].email} />);\r\n\t\t}\r\n\t)\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{cardArray}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default CardList;","import React, { Fragment } from 'react';\r\n\r\nconst SearchBox = ({ searchField,searchChanges }) => {\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<input\r\n\t\t\ttype=\"search\"\r\n\t\t\tplaceholder=\"search here\"\r\n\t\t\tonChange={searchChanges}\r\n\t\t\t />\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll', border:'2px solid black', height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state= {\r\n\t\t\thasError:false,\r\n\t\t}\r\n\t}\r\n\t\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h2>OOOOps ErroR</h2>\r\n\t\t} else {\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { PureComponent } from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcount: 0\r\n\t\t}\r\n\t}\r\n\r\n/*\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\tif(this.state.count !== nextState.count) {\r\n\t\t\treturn true;\r\n\t\t} \r\n\t\t\r\n\t\treturn false;\r\n\t}*/\r\n\r\n\tupdateCount = () => {\r\n\t\tthis.setState(state => {\r\n\t\t\treturn {count: state.count + 1}\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log(\"CounterButton\");\r\n\t\tconsole.log('Header');\r\n\t\treturn (\r\n\t\t\t<button style={{color:this.props.colour}} onClick={this.updateCount}>\r\n\t\t\t\tCount: {this.state.count}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from '../CounterButton/CounterButton';\r\n\r\nclass Header extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log(\"Header\");\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Robofriends</h1>\r\n\t\t\t\t<CounterButton colour={'blue'}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList/cardList';\r\nimport SearchBox from '../Components/SearchBox/SearchBox';\r\nimport { connect } from 'react-redux';\r\nimport './App.css'; \r\nimport Scroll from '../Components/Scroll/Scroll.js';\r\nimport ErrorBoundary from '../Components/ErrorBoundary/ErrorBoundary.js';\r\nimport Header from '../Components/Header/Header.js';\r\n\r\nimport { setSearchField, requestCats } from '../action';\r\n\r\nconst mapToStateProps = (state) =>{\r\n\treturn {\r\n\t\tsearchField: state.searchCats.searchField,\r\n\t\tCats: state.requestCats.Cats,\r\n\t\tisPending: state.requestCats.isPending,\r\n\t\terror: state.requestCats.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChanges: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestCats: () => dispatch(requestCats())\r\n\t}\r\n}\r\n\r\nclass App extends Component{\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestCats();\r\n\t}\r\n\r\n\tonSearchChanges = (event) => {\r\n\t\tthis.setState({ searchField : event.target.value });\r\n\t}\r\n\r\n\trender(){ \r\n\t\tconst { searchField, onSearchChanges, Cats, isPending } = this.props;\r\n\t\tconst filteredCats = Cats.filter(Cats => {\r\n\t\t\treturn Cats.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t<h1>Loading................</h1>:\r\n\t\t(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<Header />\r\n\t\t\t\t<SearchBox searchChanges={onSearchChanges} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList info={filteredCats} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t    </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapToStateProps, mapDispatchToProps)(App);\r\n","import { \r\n\tCHANGE_SEARCH_FIELD ,\r\n\tREQUEST_CATS_PENDING,\r\n\tREQUEST_CATS_SUCCESS,\r\n\tREQUEST_CATS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestCats = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_CATS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then((data) => {\r\n\t\t\tdispatch({type: REQUEST_CATS_SUCCESS, payload: data})\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tdispatch({type: REQUEST_CATS_FAILED, payload:error})\r\n\t\t})\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_CATS_PENDING = 'REQUEST_CATS_PENDING';\r\nexport const REQUEST_CATS_SUCCESS = 'REQUEST_CATS_SUCCESS';\r\nexport const REQUEST_CATS_FAILED = 'REQUEST_CATS_FAILED';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport { searchCats, requestCats } from './reducers';\r\nimport App from './Containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchCats, requestCats});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  \t<Provider store={store}>\r\n\t  \t<App />\r\n  \t</Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}